What happens when you initialize a repository? Why do you need to do it?

 - The .git folder is generating, with the metadata needed to start tracking all the changes in the files. The files are needed, so it's important to init the folder. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

 - As an intermediate stage, it allows you to visualize changes before commiting them, which can be useful to double check decissions. 

How can you use the staging area to make sure you have one commit per logical change?

 - Checking the differences between the working directory and the staging area, and the differences between the last one and the most recent commit before making a new commit. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

 - When I want more than one version of the files I'm currently working in. Branches would help to introduce changes to some files without affecting the same files in the other branches (so, at some point, making 2 versions of the same file and just changing one)

How do the diagrams help you visualize the branch structure?

 - It's easy to see the parent relationship with arrows and even easier to see the unreachable commits.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

 - Adding the changes of one branch into the checkouted one, including also the last branch changes, not only to the merged branch parent. In the diagram is important to see that the merging is a new commit and that it allows to check both merged branches parents and commits, not only the global changes. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

 - It would be a waste of time to manually merge files or commits that doesn't conflict between them and it's really useful that that is automatised. And it is also a great advantage that if there's the smallest conflict it lets you solve it manually. It is true that lots of problems may be easy enough to be detectable by automatization, but it would take more time to find a bug introduced by an incorrect merge than to manually solve a simple conflict, so it's best if it's done that way. 